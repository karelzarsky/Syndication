//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.7.0 (NJsonSchema v10.3.9.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Estimize.Estimize
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.7.0 (NJsonSchema v10.3.9.0 (Newtonsoft.Json v12.0.0.2))")]
    public interface IController
    {
        /// <summary>List Estimize companies</summary>
        /// <returns>Companies Covered by Estimize</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Company>> ListCompaniesAsync();
    
        /// <summary>Get Company Information</summary>
        /// <returns>Company Information</returns>
        System.Threading.Tasks.Task<Company> GetCompanyByTickerAsync(string ticker);
    
        /// <summary>Get Company Releases by Ticker</summary>
        /// <returns>List of Company Releases</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Release>> GetCompanyReleasesByTickerAsync(string ticker);
    
        /// <summary>Get Company Releases by Ticker and Year</summary>
        /// <returns>List of Company Releases</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Release>> GetCompanyReleasesByTickerAndYearAsync(string ticker, double year);
    
        /// <summary>Get Company Release by Ticker for Year and Quarter</summary>
        /// <returns>Company Release</returns>
        System.Threading.Tasks.Task<Release> GetCompanyReleaseByTickerAndYearAndQuarterAsync(string ticker, double year, double quarter);
    
        /// <summary>Get Company Releases by CurrentQuarterDelta</summary>
        /// <returns>Company Release</returns>
        System.Threading.Tasks.Task<Release> GetCompanyReleaseByCurrentQuarterDeltaAsync(string ticker, double current_quarter_delta);
    
        /// <summary>Get Company Estimates by Ticker</summary>
        /// <returns>List of Company Estimates</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Estimate>> GetCompanyEstimatesByTickerAsync(string ticker);
    
        /// <summary>Get Company Estimates by Ticker and Year</summary>
        /// <returns>List of Company Estimates for year</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Estimate>> GetCompanyEstimatesByTickerAndYearAsync(string ticker, double year);
    
        /// <summary>Get Company Estimates by Ticker for Year and Quarter</summary>
        /// <returns>List of Company Estimates for year and quarter</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Estimate>> GetCompanyEstimatesByTickerAndYearAndQuarterAsync(string ticker, double year, double quarter);
    
        /// <summary>Get all Estimates for date range</summary>
        /// <returns>All Estimates for specified date range</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Estimate>> GetEstimatesAsync(string start_date, double end_date);
    
        /// <summary>Get Consensus for Release</summary>
        /// <param name="type">Specifies the consensus type, one of 'estimize', 'wallstreet', or 'estimize_weighted'</param>
        /// <returns>Consensus for the specified release</returns>
        System.Threading.Tasks.Task<ConsensusReleaseResponse> GetConsensusForReleaseAsync(string release_id, string type);
    
        /// <summary>Get recently updated Consensuses</summary>
        /// <param name="since">The starting timestamp for the time range of updated consensuses to return, formatted in ISO 8601, up to 24 hours before the current time.</param>
        /// <param name="within">The number of minutes before the current time for the time range of updated consensuses to return, up to 1440 (24 hours before the current time)</param>
        /// <returns>Recently updated Consensuses</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConsensusResponse>> GetConsensusesRecentlyUpdatedAsync(string since, string within);
    
        /// <summary>List Estimize companies that have metrics</summary>
        /// <returns>Companies Covered by Estimize with Metrics</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Company>> ListCompaniesWithMetricsAsync();
    
        /// <summary>Get Metrics Information for specified Company</summary>
        /// <returns>Metrics For Company</returns>
        System.Threading.Tasks.Task<Metric> GetMetricsForCompanyAsync(string ticker);
    
        /// <summary>Get Company Releases by Ticker for Metric</summary>
        /// <returns>List of Company Releases for Metric</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricRelease>> GetCompanyReleasesByTickerForMetricAsync(string ticker, string metric_name);
    
        /// <summary>Get Company Releases by Ticker and Year for Metric</summary>
        /// <returns>List of Company Releases for Metric</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricRelease>> GetCompanyReleasesByTickerAndYearForMetricAsync(string ticker, string metric_name, double year);
    
        /// <summary>Get Company Release by Ticker for Year and Quarter for Metric</summary>
        /// <returns>Company Release for Metric</returns>
        System.Threading.Tasks.Task<MetricRelease> GetCompanyReleaseByTickerAndYearAndQuarterForMetricAsync(string ticker, string metric_name, double year, double quarter);
    
        /// <summary>Get Company Releases by CurrentQuarterDelta for Metric</summary>
        /// <returns>Company Release for Metric</returns>
        System.Threading.Tasks.Task<MetricRelease> GetCompanyReleaseByCurrentQuarterDeltaForMetricAsync(string ticker, string metric_name, double current_quarter_delta);
    
        /// <summary>Get Company Estimates by Ticker for Metric</summary>
        /// <returns>List of Company Estimates for Metric</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricEstimate>> GetCompanyEstimatesByTickerForMetricAsync(string ticker, string metric_name);
    
        /// <summary>Get Company Estimates by Ticker and Year for Metric</summary>
        /// <returns>List of Company Estimates for Metric for year</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricEstimate>> GetCompanyEstimatesByTickerAndYearForMetricAsync(string ticker, string metric_name, double year);
    
        /// <summary>Get Company Estimates by Ticker for Year and Quarter for Metric</summary>
        /// <returns>List of Company Estimates for Metric for year and quarter</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricEstimate>> GetCompanyEstimatesByTickerAndYearAndQuarterForMetricAsync(string ticker, string metric_name, double year, double quarter);
    
        /// <summary>Get all Estimates for Metric for date range</summary>
        /// <returns>All Estimates for specified date range</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricEstimate>> GetEstimatesForMetricAsync(string metric_name, string start_date, double end_date);
    
        /// <summary>Get Consensus for Release for Metric</summary>
        /// <param name="type">Specifies the consensus type, one of 'estimize', or 'estimize_weighted'</param>
        /// <returns>Consensus for the specified Release and Metric</returns>
        System.Threading.Tasks.Task<MetricConsensusReleaseResponse> GetConsensusForReleaseForMetricAsync(string release_id, string metric_name, string type);
    
        /// <summary>Get recently updated Consensuses for Metrics</summary>
        /// <param name="since">The starting timestamp for the time range of updated consensuses to return, formatted in ISO 8601, up to 24 hours before the current time.</param>
        /// <param name="within">The number of minutes before the current time for the time range of updated consensuses to return, up to 1440 (24 hours before the current time)</param>
        /// <returns>Recently updated Metric Consensuses</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricConsensusResponse>> GetConsensusesRecentlyUpdatedForMetricsAsync(string since, string within);
    
        /// <summary>Get Economic Indicators</summary>
        /// <returns>All Estimize Economic Indicators</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EconomicIndicator>> GetEconomicIndicatorsAsync();
    
        /// <summary>Get Economic Indicator by Id</summary>
        /// <returns>Estimize Economic Indicator for ID</returns>
        System.Threading.Tasks.Task<EconomicIndicator> GetEconomicIndicatorByIdAsync(string id);
    
        /// <summary>Get Economic Indicator Release by Id</summary>
        /// <param name="year">Returns releases that occured during the specified year</param>
        /// <param name="period">Returns releases for the specified period. Unless combined with year, will return releases from all available years</param>
        /// <returns>Estimize Economic Indicator Releases</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EconomicIndicatorRelease>> GetEconomicIndicatorReleasesByIdAsync(string id, string year, string period);
    
        /// <summary>Get Economic Indicator Estimates by Id</summary>
        /// <param name="year">Returns estimates that occured during the specified year</param>
        /// <param name="period">Returns estimates for the specified period. Unless combined with year, will return releases from all available years</param>
        /// <returns>Estimize Economic Indicator Estimates</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EconomicIndicatorEstimate>> GetEconomicIndicatorEstimatesByIdAsync(string id, string year, string period);
    
        /// <summary>Get Signals for date range</summary>
        /// <param name="from_date">The beginning date of the date range query in YYYY-MM-DD format (defaults to current start-of-day)</param>
        /// <param name="to_date">The ending date of the date range query in YYYY-MM-DD format (defaults to current-end-of day)</param>
        /// <returns>All Signals for specified date range</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Signal>> GetSignalsAsync(string from_date, double? to_date);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.7.0 (NJsonSchema v10.3.9.0 (Newtonsoft.Json v12.0.0.2))")]
    [Microsoft.AspNetCore.Mvc.Route("seburke/Estimize-V1/1.0.0")]
    public partial class Controller : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IController _implementation;
    
        public Controller(IController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>List Estimize companies</summary>
        /// <returns>Companies Covered by Estimize</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("companies")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Company>> ListCompanies()
        {
            return _implementation.ListCompaniesAsync();
        }
    
        /// <summary>Get Company Information</summary>
        /// <returns>Company Information</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("companies/{ticker}")]
        public System.Threading.Tasks.Task<Company> GetCompanyByTicker(string ticker)
        {
            return _implementation.GetCompanyByTickerAsync(ticker);
        }
    
        /// <summary>Get Company Releases by Ticker</summary>
        /// <returns>List of Company Releases</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("companies/{ticker}/releases")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Release>> GetCompanyReleasesByTicker(string ticker)
        {
            return _implementation.GetCompanyReleasesByTickerAsync(ticker);
        }
    
        /// <summary>Get Company Releases by Ticker and Year</summary>
        /// <returns>List of Company Releases</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("companies/{ticker}/releases/{year}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Release>> GetCompanyReleasesByTickerAndYear(string ticker, double year)
        {
            return _implementation.GetCompanyReleasesByTickerAndYearAsync(ticker, year);
        }
    
        /// <summary>Get Company Release by Ticker for Year and Quarter</summary>
        /// <returns>Company Release</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("companies/{ticker}/releases/{year}/{quarter}")]
        public System.Threading.Tasks.Task<Release> GetCompanyReleaseByTickerAndYearAndQuarter(string ticker, double year, double quarter)
        {
            return _implementation.GetCompanyReleaseByTickerAndYearAndQuarterAsync(ticker, year, quarter);
        }
    
        /// <summary>Get Company Releases by CurrentQuarterDelta</summary>
        /// <returns>Company Release</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("companies/{ticker}/releases/{current_quarter_delta}")]
        public System.Threading.Tasks.Task<Release> GetCompanyReleaseByCurrentQuarterDelta(string ticker, double current_quarter_delta)
        {
            return _implementation.GetCompanyReleaseByCurrentQuarterDeltaAsync(ticker, current_quarter_delta);
        }
    
        /// <summary>Get Company Estimates by Ticker</summary>
        /// <returns>List of Company Estimates</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("companies/{ticker}/estimates")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Estimate>> GetCompanyEstimatesByTicker(string ticker)
        {
            return _implementation.GetCompanyEstimatesByTickerAsync(ticker);
        }
    
        /// <summary>Get Company Estimates by Ticker and Year</summary>
        /// <returns>List of Company Estimates for year</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("companies/{ticker}/estimates/{year}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Estimate>> GetCompanyEstimatesByTickerAndYear(string ticker, double year)
        {
            return _implementation.GetCompanyEstimatesByTickerAndYearAsync(ticker, year);
        }
    
        /// <summary>Get Company Estimates by Ticker for Year and Quarter</summary>
        /// <returns>List of Company Estimates for year and quarter</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("companies/{ticker}/estimates/{year}/{quarter}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Estimate>> GetCompanyEstimatesByTickerAndYearAndQuarter(string ticker, double year, double quarter)
        {
            return _implementation.GetCompanyEstimatesByTickerAndYearAndQuarterAsync(ticker, year, quarter);
        }
    
        /// <summary>Get all Estimates for date range</summary>
        /// <returns>All Estimates for specified date range</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("estimates")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Estimate>> GetEstimates([Microsoft.AspNetCore.Mvc.FromQuery] string start_date, [Microsoft.AspNetCore.Mvc.FromQuery] double end_date)
        {
            return _implementation.GetEstimatesAsync(start_date, end_date);
        }
    
        /// <summary>Get Consensus for Release</summary>
        /// <param name="type">Specifies the consensus type, one of 'estimize', 'wallstreet', or 'estimize_weighted'</param>
        /// <returns>Consensus for the specified release</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("releases/{release_id}/consensus")]
        public System.Threading.Tasks.Task<ConsensusReleaseResponse> GetConsensusForRelease(string release_id, [Microsoft.AspNetCore.Mvc.FromQuery] string type)
        {
            return _implementation.GetConsensusForReleaseAsync(release_id, type);
        }
    
        /// <summary>Get recently updated Consensuses</summary>
        /// <param name="since">The starting timestamp for the time range of updated consensuses to return, formatted in ISO 8601, up to 24 hours before the current time.</param>
        /// <param name="within">The number of minutes before the current time for the time range of updated consensuses to return, up to 1440 (24 hours before the current time)</param>
        /// <returns>Recently updated Consensuses</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consensuses/recently_updated")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConsensusResponse>> GetConsensusesRecentlyUpdated([Microsoft.AspNetCore.Mvc.FromQuery] string since, [Microsoft.AspNetCore.Mvc.FromQuery] string within)
        {
            return _implementation.GetConsensusesRecentlyUpdatedAsync(since, within);
        }
    
        /// <summary>List Estimize companies that have metrics</summary>
        /// <returns>Companies Covered by Estimize with Metrics</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/companies")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Company>> ListCompaniesWithMetrics()
        {
            return _implementation.ListCompaniesWithMetricsAsync();
        }
    
        /// <summary>Get Metrics Information for specified Company</summary>
        /// <returns>Metrics For Company</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/companies/{ticker}")]
        public System.Threading.Tasks.Task<Metric> GetMetricsForCompany(string ticker)
        {
            return _implementation.GetMetricsForCompanyAsync(ticker);
        }
    
        /// <summary>Get Company Releases by Ticker for Metric</summary>
        /// <returns>List of Company Releases for Metric</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/companies/{ticker}/releases/{metric_name}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricRelease>> GetCompanyReleasesByTickerForMetric(string ticker, string metric_name)
        {
            return _implementation.GetCompanyReleasesByTickerForMetricAsync(ticker, metric_name);
        }
    
        /// <summary>Get Company Releases by Ticker and Year for Metric</summary>
        /// <returns>List of Company Releases for Metric</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/companies/{ticker}/releases/{metric_name}/{year}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricRelease>> GetCompanyReleasesByTickerAndYearForMetric(string ticker, string metric_name, double year)
        {
            return _implementation.GetCompanyReleasesByTickerAndYearForMetricAsync(ticker, metric_name, year);
        }
    
        /// <summary>Get Company Release by Ticker for Year and Quarter for Metric</summary>
        /// <returns>Company Release for Metric</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/companies/{ticker}/releases/{metric_name}/{year}/{quarter}")]
        public System.Threading.Tasks.Task<MetricRelease> GetCompanyReleaseByTickerAndYearAndQuarterForMetric(string ticker, string metric_name, double year, double quarter)
        {
            return _implementation.GetCompanyReleaseByTickerAndYearAndQuarterForMetricAsync(ticker, metric_name, year, quarter);
        }
    
        /// <summary>Get Company Releases by CurrentQuarterDelta for Metric</summary>
        /// <returns>Company Release for Metric</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/companies/{ticker}/releases/{metric_name}/{current_quarter_delta}")]
        public System.Threading.Tasks.Task<MetricRelease> GetCompanyReleaseByCurrentQuarterDeltaForMetric(string ticker, string metric_name, double current_quarter_delta)
        {
            return _implementation.GetCompanyReleaseByCurrentQuarterDeltaForMetricAsync(ticker, metric_name, current_quarter_delta);
        }
    
        /// <summary>Get Company Estimates by Ticker for Metric</summary>
        /// <returns>List of Company Estimates for Metric</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/companies/{ticker}/estimates/{metric_name}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricEstimate>> GetCompanyEstimatesByTickerForMetric(string ticker, string metric_name)
        {
            return _implementation.GetCompanyEstimatesByTickerForMetricAsync(ticker, metric_name);
        }
    
        /// <summary>Get Company Estimates by Ticker and Year for Metric</summary>
        /// <returns>List of Company Estimates for Metric for year</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/companies/{ticker}/estimates/{metric_name}/{year}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricEstimate>> GetCompanyEstimatesByTickerAndYearForMetric(string ticker, string metric_name, double year)
        {
            return _implementation.GetCompanyEstimatesByTickerAndYearForMetricAsync(ticker, metric_name, year);
        }
    
        /// <summary>Get Company Estimates by Ticker for Year and Quarter for Metric</summary>
        /// <returns>List of Company Estimates for Metric for year and quarter</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/companies/{ticker}/estimates/{metric_name}/{year}/{quarter}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricEstimate>> GetCompanyEstimatesByTickerAndYearAndQuarterForMetric(string ticker, string metric_name, double year, double quarter)
        {
            return _implementation.GetCompanyEstimatesByTickerAndYearAndQuarterForMetricAsync(ticker, metric_name, year, quarter);
        }
    
        /// <summary>Get all Estimates for Metric for date range</summary>
        /// <returns>All Estimates for specified date range</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/estimates/{metric_name}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricEstimate>> GetEstimatesForMetric(string metric_name, [Microsoft.AspNetCore.Mvc.FromQuery] string start_date, [Microsoft.AspNetCore.Mvc.FromQuery] double end_date)
        {
            return _implementation.GetEstimatesForMetricAsync(metric_name, start_date, end_date);
        }
    
        /// <summary>Get Consensus for Release for Metric</summary>
        /// <param name="type">Specifies the consensus type, one of 'estimize', or 'estimize_weighted'</param>
        /// <returns>Consensus for the specified Release and Metric</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/releases/{release_id}/consensus/{metric_name}")]
        public System.Threading.Tasks.Task<MetricConsensusReleaseResponse> GetConsensusForReleaseForMetric(string release_id, string metric_name, [Microsoft.AspNetCore.Mvc.FromQuery] string type)
        {
            return _implementation.GetConsensusForReleaseForMetricAsync(release_id, metric_name, type);
        }
    
        /// <summary>Get recently updated Consensuses for Metrics</summary>
        /// <param name="since">The starting timestamp for the time range of updated consensuses to return, formatted in ISO 8601, up to 24 hours before the current time.</param>
        /// <param name="within">The number of minutes before the current time for the time range of updated consensuses to return, up to 1440 (24 hours before the current time)</param>
        /// <returns>Recently updated Metric Consensuses</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metrics/consensuses/recently_updated")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricConsensusResponse>> GetConsensusesRecentlyUpdatedForMetrics([Microsoft.AspNetCore.Mvc.FromQuery] string since, [Microsoft.AspNetCore.Mvc.FromQuery] string within)
        {
            return _implementation.GetConsensusesRecentlyUpdatedForMetricsAsync(since, within);
        }
    
        /// <summary>Get Economic Indicators</summary>
        /// <returns>All Estimize Economic Indicators</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("economic_indicators")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EconomicIndicator>> GetEconomicIndicators()
        {
            return _implementation.GetEconomicIndicatorsAsync();
        }
    
        /// <summary>Get Economic Indicator by Id</summary>
        /// <returns>Estimize Economic Indicator for ID</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("economic_indicators/{id}")]
        public System.Threading.Tasks.Task<EconomicIndicator> GetEconomicIndicatorById(string id)
        {
            return _implementation.GetEconomicIndicatorByIdAsync(id);
        }
    
        /// <summary>Get Economic Indicator Release by Id</summary>
        /// <param name="year">Returns releases that occured during the specified year</param>
        /// <param name="period">Returns releases for the specified period. Unless combined with year, will return releases from all available years</param>
        /// <returns>Estimize Economic Indicator Releases</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("economic_indicators/{id}/releases")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EconomicIndicatorRelease>> GetEconomicIndicatorReleasesById(string id, [Microsoft.AspNetCore.Mvc.FromQuery] string year, [Microsoft.AspNetCore.Mvc.FromQuery] string period)
        {
            return _implementation.GetEconomicIndicatorReleasesByIdAsync(id, year, period);
        }
    
        /// <summary>Get Economic Indicator Estimates by Id</summary>
        /// <param name="year">Returns estimates that occured during the specified year</param>
        /// <param name="period">Returns estimates for the specified period. Unless combined with year, will return releases from all available years</param>
        /// <returns>Estimize Economic Indicator Estimates</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("economic_indicators/{id}/estimates")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EconomicIndicatorEstimate>> GetEconomicIndicatorEstimatesById(string id, [Microsoft.AspNetCore.Mvc.FromQuery] string year, [Microsoft.AspNetCore.Mvc.FromQuery] string period)
        {
            return _implementation.GetEconomicIndicatorEstimatesByIdAsync(id, year, period);
        }
    
        /// <summary>Get Signals for date range</summary>
        /// <param name="from_date">The beginning date of the date range query in YYYY-MM-DD format (defaults to current start-of-day)</param>
        /// <param name="to_date">The ending date of the date range query in YYYY-MM-DD format (defaults to current-end-of day)</param>
        /// <returns>All Signals for specified date range</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("signals")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Signal>> GetSignals([Microsoft.AspNetCore.Mvc.FromQuery] string from_date, [Microsoft.AspNetCore.Mvc.FromQuery] double? to_date)
        {
            return _implementation.GetSignalsAsync(from_date, to_date);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class _422Response 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class Company 
    //{
    //    /// <summary>The name of the Company</summary>
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Name { get; set; }
    
    //    /// <summary>The ticker/symbol for the company</summary>
    //    [Newtonsoft.Json.JsonProperty("ticker", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Ticker { get; set; }
    
    //    /// <summary>The Cusip used to identify the security</summary>
    //    [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Cusip { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class Metric 
    //{
    //    /// <summary>The name of the Metric</summary>
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Name { get; set; }
    
    //    /// <summary>The unit the metric is measured in</summary>
    //    [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Unit { get; set; }
    
    //    /// <summary>The description of the metric</summary>
    //    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Description { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class Release 
    //{
    //    /// <summary>The unique identifier for the release</summary>
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Id { get; set; }
    
    //    /// <summary>The fiscal year for the release</summary>
    //    [Newtonsoft.Json.JsonProperty("fiscal_year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Fiscal_year { get; set; }
    
    //    /// <summary>The fiscal quarter for the release</summary>
    //    [Newtonsoft.Json.JsonProperty("fiscal_quarter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Fiscal_quarter { get; set; }
    
    //    /// <summary>The date of the release</summary>
    //    [Newtonsoft.Json.JsonProperty("release_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Release_date { get; set; }
    
    //    /// <summary>The earnings per share for the spcified fiscal quarter</summary>
    //    [Newtonsoft.Json.JsonProperty("eps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Eps { get; set; }
    
    //    /// <summary>The revenue for the specified fiscal quarter</summary>
    //    [Newtonsoft.Json.JsonProperty("revenue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Revenue { get; set; }
    
    //    /// <summary>The estimated EPS from Wall Street</summary>
    //    [Newtonsoft.Json.JsonProperty("wallstreet_eps_estimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Wallstreet_eps_estimate { get; set; }
    
    //    /// <summary>The estimated revenue from Wall Street</summary>
    //    [Newtonsoft.Json.JsonProperty("wallstreet_revenue_estimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Wallstreet_revenue_estimate { get; set; }
    
    //    /// <summary>The mean EPS consensus by the Estimize community</summary>
    //    [Newtonsoft.Json.JsonProperty("consensus_eps_estimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Consensus_eps_estimate { get; set; }
    
    //    /// <summary>The mean revenue consensus by the Estimize community</summary>
    //    [Newtonsoft.Json.JsonProperty("consensus_revenue_estimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Consensus_revenue_estimate { get; set; }
    
    //    /// <summary>The weighted EPS consensus by the Estimize community</summary>
    //    [Newtonsoft.Json.JsonProperty("consensus_weighted_eps_estimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Consensus_weighted_eps_estimate { get; set; }
    
    //    /// <summary>The weighted revenue consensus by the Estimize community</summary>
    //    [Newtonsoft.Json.JsonProperty("consensus_weighted_revenue_estimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Consensus_weighted_revenue_estimate { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class MetricRelease 
    //{
    //    /// <summary>The unique identifier for the release</summary>
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Id { get; set; }
    
    //    /// <summary>The fiscal year for the release</summary>
    //    [Newtonsoft.Json.JsonProperty("fiscal_year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Fiscal_year { get; set; }
    
    //    /// <summary>The fiscal quarter for the release</summary>
    //    [Newtonsoft.Json.JsonProperty("fiscal_quarter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Fiscal_quarter { get; set; }
    
    //    /// <summary>The date of the release</summary>
    //    [Newtonsoft.Json.JsonProperty("release_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Release_date { get; set; }
    
    //    /// <summary>The number reported for the specified metric</summary>
    //    [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Actual { get; set; }
    
    //    /// <summary>The mean consensus by the Estimize community for the metric</summary>
    //    [Newtonsoft.Json.JsonProperty("consensus_estimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Consensus_estimate { get; set; }
    
    //    /// <summary>The weighted consensus by the Estimize community for the metric</summary>
    //    [Newtonsoft.Json.JsonProperty("consensus_weighted_estimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Consensus_weighted_estimate { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class Estimate 
    //{
    //    /// <summary>The unique identifier for the estimate</summary>
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Id { get; set; }
    
    //    /// <summary>The ticker of the company being estimated</summary>
    //    [Newtonsoft.Json.JsonProperty("ticker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Ticker { get; set; }
    
    //    /// <summary>The fiscal year of the quarter being estimated</summary>
    //    [Newtonsoft.Json.JsonProperty("fiscal_year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Fiscal_year { get; set; }
    
    //    /// <summary>The fiscal quarter of the quarter being estimated</summary>
    //    [Newtonsoft.Json.JsonProperty("fiscal_quarter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Fiscal_quarter { get; set; }
    
    //    /// <summary>The estimated earnings per share for the company in the specified fiscal quarter</summary>
    //    [Newtonsoft.Json.JsonProperty("eps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Eps { get; set; }
    
    //    /// <summary>The estimated revenue for the company in the specified fiscal quarter</summary>
    //    [Newtonsoft.Json.JsonProperty("revenue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Revenue { get; set; }
    
    //    /// <summary>The current username of the author of the estimate, which can change</summary>
    //    [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Username { get; set; }
    
    //    /// <summary>The unique identifier for the author of the estimate</summary>
    //    [Newtonsoft.Json.JsonProperty("analyst_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Analyst_id { get; set; }
    
    //    /// <summary>The time that the estimate was created (UTC)</summary>
    //    [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Created_at { get; set; }
    
    //    /// <summary>A boolean value which indicates whether we have flagged this estimate internally as erroneous (spam, wrong accounting standard, etc)</summary>
    //    [Newtonsoft.Json.JsonProperty("flagged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool Flagged { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class MetricEstimate 
    //{
    //    /// <summary>The unique identifier for the estimate</summary>
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Id { get; set; }
    
    //    /// <summary>The ticker of the company being estimated</summary>
    //    [Newtonsoft.Json.JsonProperty("ticker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Ticker { get; set; }
    
    //    /// <summary>The fiscal year of the quarter being estimated</summary>
    //    [Newtonsoft.Json.JsonProperty("fiscal_year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Fiscal_year { get; set; }
    
    //    /// <summary>The fiscal quarter of the quarter being estimated</summary>
    //    [Newtonsoft.Json.JsonProperty("fiscal_quarter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Fiscal_quarter { get; set; }
    
    //    /// <summary>The estimated value of the metric for the company in the specified fiscal quarter</summary>
    //    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Value { get; set; }
    
    //    /// <summary>The current username of the author of the estimate, which can change</summary>
    //    [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Username { get; set; }
    
    //    /// <summary>The unique identifier for the author of the estimate</summary>
    //    [Newtonsoft.Json.JsonProperty("analyst_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Analyst_id { get; set; }
    
    //    /// <summary>The time that the estimate was created (UTC)</summary>
    //    [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Created_at { get; set; }
    
    //    /// <summary>A boolean value which indicates whether we have flagged this estimate internally as erroneous (spam, wrong accounting standard, etc)</summary>
    //    [Newtonsoft.Json.JsonProperty("flagged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool Flagged { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class Consensus 
    //{
    //    /// <summary>The mean of the distribution of estimates (the "consensus")</summary>
    //    [Newtonsoft.Json.JsonProperty("mean", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Mean { get; set; }
    
    //    /// <summary>The highest estimate in the distribution</summary>
    //    [Newtonsoft.Json.JsonProperty("high", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double High { get; set; }
    
    //    /// <summary>The lowest estimate in the distribution</summary>
    //    [Newtonsoft.Json.JsonProperty("low", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Low { get; set; }
    
    //    /// <summary>The standard deviation of the distribution</summary>
    //    [Newtonsoft.Json.JsonProperty("standard_deviation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Standard_deviation { get; set; }
    
    //    /// <summary>The number of estimates in the distribution</summary>
    //    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Count { get; set; }
    
    //    /// <summary>The timestamp of this consensus (UTC)</summary>
    //    [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Updated_at { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class MetricConsensus 
    //{
    //    /// <summary>The mean of the distribution of estimates (the "consensus")</summary>
    //    [Newtonsoft.Json.JsonProperty("mean", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Mean { get; set; }
    
    //    /// <summary>The highest estimate in the distribution</summary>
    //    [Newtonsoft.Json.JsonProperty("high", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double High { get; set; }
    
    //    /// <summary>The lowest estimate in the distribution</summary>
    //    [Newtonsoft.Json.JsonProperty("low", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Low { get; set; }
    
    //    /// <summary>The standard deviation of the distribution</summary>
    //    [Newtonsoft.Json.JsonProperty("standard_deviation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Standard_deviation { get; set; }
    
    //    /// <summary>The number of estimates in the distribution</summary>
    //    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Count { get; set; }
    
    //    /// <summary>The timestamp of this consensus (UTC)</summary>
    //    [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Updated_at { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class ConsensusWithRevisions : Consensus
    //{
    //    /// <summary>An array of objects in the same format as above with a timestamped history (see updated_at)</summary>
    //    [Newtonsoft.Json.JsonProperty("revisions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.Collections.Generic.List<Consensus> Revisions { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class MetricConsensusWithRevisions : MetricConsensus
    //{
    //    /// <summary>An array of objects in the same format as above with a timestamped history (see updated_at)</summary>
    //    [Newtonsoft.Json.JsonProperty("revisions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.Collections.Generic.List<MetricConsensus> Revisions { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class ConsensusReleaseResponse 
    //{
    //    [Newtonsoft.Json.JsonProperty("wallstreet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Wallstreet Wallstreet { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("estimize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Estimize Estimize { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class MetricConsensusReleaseResponse 
    //{
    //    [Newtonsoft.Json.JsonProperty("estimize_weighted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public MetricConsensusWithRevisions Estimize_weighted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("estimize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public MetricConsensusWithRevisions Estimize { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class ConsensusResponse : ConsensusWithRevisions
    //{
    //    /// <summary>The unique identifier for the release to which this consensus belongs</summary>
    //    [Newtonsoft.Json.JsonProperty("release_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Release_id { get; set; }
    
    //    /// <summary>One of wallstreet, estimize, or estimize_weighted</summary>
    //    [Newtonsoft.Json.JsonProperty("population", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Population { get; set; }
    
    //    /// <summary>Either eps or revenue</summary>
    //    [Newtonsoft.Json.JsonProperty("metric", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Metric { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class MetricConsensusResponse : MetricConsensusWithRevisions
    //{
    //    /// <summary>The unique identifier for the release to which this consensus belongs</summary>
    //    [Newtonsoft.Json.JsonProperty("release_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Release_id { get; set; }
    
    //    /// <summary>One of estimize or estimize_weighted</summary>
    //    [Newtonsoft.Json.JsonProperty("population", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Population { get; set; }
    
    //    /// <summary>The name of the metric</summary>
    //    [Newtonsoft.Json.JsonProperty("metric", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Metric { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class EconomicIndicator 
    //{
    //    /// <summary>The unique identifier for the economic indicator, used in queries for its releases and estimates</summary>
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Id { get; set; }
    
    //    /// <summary>TThe name of the economic indicator</summary>
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Name { get; set; }
    
    //    /// <summary>The name of the country for the economic indicator</summary>
    //    [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Country { get; set; }
    
    //    /// <summary>The denomination or category of values, one of "absolute", "thousands", "millions", "billions", "percent"</summary>
    //    [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Unit { get; set; }
    
    //    /// <summary>The number of releases every year, one of 4, 12, 52</summary>
    //    [Newtonsoft.Json.JsonProperty("reports_per_year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Reports_per_year { get; set; }
    
    //    /// <summary>Which release's actuals to calculate percent changes against, either of "year_over_year" or "previous"</summary>
    //    [Newtonsoft.Json.JsonProperty("comparison_period", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Comparison_period { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class EconomicIndicatorRelease 
    //{
    //    /// <summary>The unique identifier for the release</summary>
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Id { get; set; }
    
    //    /// <summary>The latest reported value for the release</summary>
    //    [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Actual { get; set; }
    
    //    /// <summary>The percent change of the actual versus the comparison period actual</summary>
    //    [Newtonsoft.Json.JsonProperty("percent_change", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Percent_change { get; set; }
    
    //    /// <summary>The average estimated value of the Estimize community</summary>
    //    [Newtonsoft.Json.JsonProperty("consensus_estimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Consensus_estimate { get; set; }
    
    //    /// <summary>The original reported value for the release</summary>
    //    [Newtonsoft.Json.JsonProperty("actual_as_reported", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Actual_as_reported { get; set; }
    
    //    /// <summary>The percent change of the actual_as_reported versus the comparison period actual</summary>
    //    [Newtonsoft.Json.JsonProperty("percent_change_as_reported", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Percent_change_as_reported { get; set; }
    
    //    /// <summary>The year in which the the release occured</summary>
    //    [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Year { get; set; }
    
    //    /// <summary>The order of the release's occurence within the year, one of 1 through the economic indicator's reports_per_year fiscal quarter</summary>
    //    [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Period { get; set; }
    
    //    /// <summary>The date of the release</summary>
    //    [Newtonsoft.Json.JsonProperty("release_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Release_date { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class EconomicIndicatorEstimate 
    //{
    //    /// <summary>The unique identifier for the estimate</summary>
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Id { get; set; }
    
    //    /// <summary>The year in which the the release occured</summary>
    //    [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Year { get; set; }
    
    //    /// <summary>The order of the estimate's release's occurence within the year, one of 1 through the economic indicator's reports_per_year</summary>
    //    [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Period { get; set; }
    
    //    /// <summary>The user's estimated value for the release</summary>
    //    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Value { get; set; }
    
    //    /// <summary>The percent change of the value versus the comparison period actual</summary>
    //    [Newtonsoft.Json.JsonProperty("percent_change", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Percent_change { get; set; }
    
    //    /// <summary>The current username of the author of the estimate, which can change</summary>
    //    [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Username { get; set; }
    
    //    /// <summary>The unique identifier for the author of the estimate</summary>
    //    [Newtonsoft.Json.JsonProperty("analyst_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Analyst_id { get; set; }
    
    //    /// <summary>The time that the estimate was created (UTC)</summary>
    //    [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Created_at { get; set; }
    
    //    /// <summary>A boolean value which indicates whether we have flagged this estimate internally as erroneous (spam, wrong accounting standard, etc)</summary>
    //    [Newtonsoft.Json.JsonProperty("flagged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool Flagged { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class Signal 
    //{
    //    /// <summary>The unique identifier for the release to which the signal corresponds</summary>
    //    [Newtonsoft.Json.JsonProperty("release_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Release_id { get; set; }
    
    //    /// <summary>The CUSIP number to identify the company and/or its underlying security</summary>
    //    [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Cusip { get; set; }
    
    //    /// <summary>The ticker/symbol for the company</summary>
    //    [Newtonsoft.Json.JsonProperty("ticker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Ticker { get; set; }
    
    //    /// <summary>The fiscal year of the associated release</summary>
    //    [Newtonsoft.Json.JsonProperty("fiscal_year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Fiscal_year { get; set; }
    
    //    /// <summary>The fiscal quarter of the associated release</summary>
    //    [Newtonsoft.Json.JsonProperty("fiscal_quarter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Fiscal_quarter { get; set; }
    
    //    /// <summary>The earnings report datetime of the release release</summary>
    //    [Newtonsoft.Json.JsonProperty("release_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Release_date { get; set; }
    
    //    /// <summary>The timestamp of the signal release release</summary>
    //    [Newtonsoft.Json.JsonProperty("as_of", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string As_of { get; set; }
    
    //    /// <summary>The signal type: pre or post earnings release</summary>
    //    [Newtonsoft.Json.JsonProperty("signal_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Signal_type { get; set; }
    
    //    /// <summary>The floating point value of the signal (-100 to +100)</summary>
    //    [Newtonsoft.Json.JsonProperty("signal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double Signal1 { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class Wallstreet 
    //{
    //    [Newtonsoft.Json.JsonProperty("eps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ConsensusWithRevisions Eps { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("revenue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ConsensusWithRevisions Revenue { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.9.0 (Newtonsoft.Json v12.0.0.2)")]
    //public partial class Estimize 
    //{
    //    [Newtonsoft.Json.JsonProperty("eps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ConsensusWithRevisions Eps { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("revenue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ConsensusWithRevisions Revenue { get; set; }
    
    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties; }
    //        set { _additionalProperties = value; }
    //    }
    
    
    //}

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108